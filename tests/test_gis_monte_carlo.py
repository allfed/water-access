
# Generated by CodiumAI
from src.gis_monte_carlo import sample_normal
from src.gis_monte_carlo import sample_lognormal
from src.gis_monte_carlo import run_simulation
from src.gis_monte_carlo import process_mc_results

import numpy as np
import pandas as pd
from pathlib import Path
import pytest

class TestSampleNormal:

    # The function returns a numpy array of size n.
    def test_returns_array_of_size_n(self):
        low = 0
        high = 10
        n = 5
        result = sample_normal(low, high, n)
        assert isinstance(result, np.ndarray)
        assert len(result) == n

    # The function returns an empty numpy array when n is 0.
    def test_returns_empty_array_when_n_is_0(self):
        low = 0
        high = 10
        n = 0
        result = sample_normal(low, high, n)
        assert isinstance(result, np.ndarray)
        assert len(result) == 0

class TestSampleLognormal:

    def test_returns_array_of_size_n(self):
        low = 1
        high = 10
        n = 5
        result = sample_lognormal(low, high, n)
        assert isinstance(result, np.ndarray)
        assert len(result) == n

    def test_returns_empty_array_when_n_is_0(self):
        low = 1
        high = 10
        n = 0
        result = sample_lognormal(low, high, n)
        assert isinstance(result, np.ndarray)
        assert len(result) == 0

    def test_raises_assertion_error_when_low_is_less_than_0(self):
        low = -1
        high = 10
        n = 5
        with pytest.raises(AssertionError):
            sample_lognormal(low, high, n)
            
class TestRunSimulation:

    def test_valid_input_returns_result(self):
        crr_adjustment = 1
        time_gathering_water = 2.5
        practical_limit_bicycle = 10
        practical_limit_buckets = 5
        met = 1.2
        result = run_simulation(crr_adjustment, time_gathering_water, practical_limit_bicycle, practical_limit_buckets, met, calculate_distance=False)
        assert isinstance(result, pd.DataFrame)

    def test_invalid_crr_adjustment_raises_assertion_error(self):
        crr_adjustment = "0.5"
        time_gathering_water = 2.5
        practical_limit_bicycle = 10
        practical_limit_buckets = 5
        met = 1.2
        with pytest.raises(AssertionError):
            run_simulation(crr_adjustment, time_gathering_water, practical_limit_bicycle, practical_limit_buckets, met)

    def test_invalid_time_gathering_water_raises_assertion_error(self):
        crr_adjustment = 1
        time_gathering_water = "invalid"
        practical_limit_bicycle = 10
        practical_limit_buckets = 5
        met = 1.2
        with pytest.raises(AssertionError):
            run_simulation(crr_adjustment, time_gathering_water, practical_limit_bicycle, practical_limit_buckets, met)

    def test_invalid_practical_limit_bicycle_raises_assertion_error(self):
        crr_adjustment = 1
        time_gathering_water = 2.5
        practical_limit_bicycle = "invalid"
        practical_limit_buckets = 5
        met = 1.2
        with pytest.raises(AssertionError):
            run_simulation(crr_adjustment, time_gathering_water, practical_limit_bicycle, practical_limit_buckets, met)

    def test_invalid_practical_limit_buckets_raises_assertion_error(self):
        crr_adjustment = 1
        time_gathering_water = 2.5
        practical_limit_bicycle = 10
        practical_limit_buckets = "invalid"
        met = 1.2
        with pytest.raises(AssertionError):
            run_simulation(crr_adjustment, time_gathering_water, practical_limit_bicycle, practical_limit_buckets, met)

    def test_invalid_met_raises_assertion_error(self):
        crr_adjustment = 1
        time_gathering_water = 2.5
        practical_limit_bicycle = 10
        practical_limit_buckets = 5
        met = "invalid"
        with pytest.raises(AssertionError):
            run_simulation(crr_adjustment, time_gathering_water, practical_limit_bicycle, practical_limit_buckets, met)



from src.gis_monte_carlo import process_mc_results